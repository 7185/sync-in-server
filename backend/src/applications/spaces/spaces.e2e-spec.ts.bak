import { NestFastifyApplication } from '@nestjs/platform-fastify'
import { appBootstrap } from '../../app.bootstrap'
import { AuthManager } from '../../auth/auth-manager.service'
import { TokenResponseDto } from '../../auth/dto/token-response.dto'
import { dbCheckConnection, dbCloseConnection } from '../../database/utils'
import { UserModel } from '../../users/models/user.model'
import { UsersAdmin } from '../../users/services/users-admin.service'
import { UsersManager } from '../../users/services/users-manager.service'
import { generateUserTest } from '../../users/utils/user'
import { isPathExists } from '../files/utils/files'
import { API_SPACES_BROWSE, SPACES_ROUTE } from './constants/routes'
import { DeleteSpaceDto } from './dto/delete-space.dto'
import { SpaceModel } from './models/space.model'
import { SpacesManager } from './services/spaces-manager.service'

describe('Spaces (e2e)', () => {
  let app: NestFastifyApplication
  let authService: AuthManager
  let usersService: UsersManager
  let usersAdminService: UsersAdmin
  let spacesManagerService: SpacesManager
  let userTest: UserModel
  let tokens: TokenResponseDto
  const spaceAlias = 'project'
  let space: SpaceModel

  beforeAll(async () => {
    app = await appBootstrap(true)
    await app.init()
    await app.getHttpAdapter().getInstance().ready()
    authService = app.get<AuthManager>(AuthManager)
    usersService = app.get<UsersManager>(UsersManager)
    usersAdminService = app.get<UsersAdmin>(UsersAdmin)
    spacesManagerService = app.get<SpacesManager>(SpacesManager)
    userTest = new UserModel(generateUserTest())
  })

  afterAll(async () => {
    // await expect(usersAdminService.deleteUser(userTest.login, { id: userTest.id, deleteSpace: true })).resolves.not.toThrow()
    await dbCloseConnection(app)
    await app.close()
  })

  it('should be defined', () => {
    expect(authService).toBeDefined()
    expect(usersService).toBeDefined()
    expect(usersAdminService).toBeDefined()
    expect(spacesManagerService).toBeDefined()
    expect(userTest).toBeDefined()
  })

  it('should get the database connection', async () => {
    expect(await dbCheckConnection(app)).toBe(true)
  })

  it('should get the user and tokens', async () => {
    // userTest = await usersAdminService.createUser(userTest)
    // expect(userTest.id).toBeDefined()
    userTest = await usersService.findUser('sync-in', false)
    tokens = await authService.getTokens(userTest)
    expect(tokens).toBeDefined()
  })

  // it(`POST ${SPACES_ROUTE.BASE} (create space : ${spaceAlias}) => 201`, async () => {
  //   const res = await app.inject({
  //     method: 'POST',
  //     url: SPACES_ROUTE.BASE,
  //     headers: { authorization: `Bearer ${tokens.access_token}` },
  //     body: <CreateOrUpdateSpaceDto>{
  //       name: 'project',
  //       description: 'a space test',
  //       permissions: <SpacePermissions[]>[{ userId: userTest.id, role: SPACE_ROLE.IS_MANAGER, permissions: SPACE_ALL_OPERATIONS }]
  //     }
  //   })
  //   expect(res.statusCode).toEqual(201)
  //   space = new SpaceModel(res.json())
  // })

  it(`GET ${API_SPACES_BROWSE}/files/${spaceAlias} => 200`, async () => {
    const res = await app.inject({
      method: 'GET',
      url: `${API_SPACES_BROWSE}/files/${spaceAlias}`,
      headers: { authorization: `Bearer ${tokens.access}` }
    })
    expect(res.statusCode).toEqual(200)
  })

  it(`GET ${API_SPACES_BROWSE}/files/${spaceAlias}/foo/ok => 200`, async () => {
    const res = await app.inject({
      method: 'GET',
      url: `${API_SPACES_BROWSE}/files/${spaceAlias}/foo/ok`,
      headers: { authorization: `Bearer ${tokens.access}` }
    })
    expect(res.statusCode).toEqual(200)
  })

  it(`GET ${API_SPACES_BROWSE}/trash/${spaceAlias} => 200`, async () => {
    const res = await app.inject({
      method: 'GET',
      url: `${API_SPACES_BROWSE}/trash/${spaceAlias}`,
      headers: { authorization: `Bearer ${tokens.access}` }
    })
    expect(res.statusCode).toEqual(200)
  })

  it(`GET ${API_SPACES_BROWSE}/trash/${spaceAlias}/bar => 200`, async () => {
    const res = await app.inject({
      method: 'GET',
      url: `${API_SPACES_BROWSE}/trash/${spaceAlias}/bar`,
      headers: { authorization: `Bearer ${tokens.access}` }
    })
    expect(res.statusCode).toEqual(200)
  })

  it(`DELETE ${SPACES_ROUTE.BASE} (delete space : project) => 200`, async () => {
    const reqDelete = async (body: DeleteSpaceDto) => {
      return await app.inject({
        method: 'DELETE',
        url: `${SPACES_ROUTE.BASE}/${space.id}`,
        headers: { authorization: `Bearer ${tokens.access}` },
        body: body
      })
    }
    let res: any
    res = await reqDelete({ deleteNow: false })
    expect(res.statusCode).toEqual(200)
    expect(await isPathExists(space.filesPath)).toBe(true)
    expect(await isPathExists(space.trashPath)).toBe(true)
    res = await reqDelete({ deleteNow: false })
    expect(res.statusCode).toEqual(200)
    expect(await isPathExists(space.filesPath)).toBeFalsy()
    expect(await isPathExists(space.trashPath)).toBeFalsy()
  })

  it(`GET ${API_SPACES_BROWSE}/files/personal => 200`, async () => {
    const res = await app.inject({
      method: 'GET',
      url: `${API_SPACES_BROWSE}/files/personal`,
      headers: { authorization: `Bearer ${tokens.access}` }
    })
    expect(res.statusCode).toEqual(200)
  })
  //
  // it(`GET ${API_SPACES_BROWSE}/files/personal/desktop-master => 200`, async () => {
  //   const res = await app.inject({
  //     method: 'GET',
  //     url: `${API_SPACES_BROWSE}/files/personal/desktop-master`,
  //     headers: { authorization: `Bearer ${tokens.access_token}` }
  //   })
  //   // console.log(res.json())
  //   expect(res.statusCode).toEqual(200)
  // })
  //
  // it(`GET ${API_SPACES_BROWSE}/files/personal/desktop-master/../ => 200`, async () => {
  //   const res = await app.inject({
  //     method: 'GET',
  //     url: `${API_SPACES_BROWSE}/files/personal/desktop-master/../`,
  //     headers: { authorization: `Bearer ${tokens.access_token}` }
  //   })
  //   // console.log(res.json())
  //   expect(res.statusCode).toEqual(200)
  // })
  //
  it(`GET ${API_SPACES_BROWSE}/trash/personal => 200`, async () => {
    const res = await app.inject({
      method: 'GET',
      url: `${API_SPACES_BROWSE}/trash/personal`,
      headers: { authorization: `Bearer ${tokens.access}` }
    })
    // console.log(res.json())
    expect(res.statusCode).toEqual(200)
  })
})
